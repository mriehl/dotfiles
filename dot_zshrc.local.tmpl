## Local Variables:
## mode: shell-script
## End:

## use the vi navigation keys (hjkl) besides cursor keys in menu completion
bindkey -M menuselect 'h' vi-backward-char        # left
bindkey -M menuselect 'k' vi-up-line-or-history   # up
bindkey -M menuselect 'l' vi-forward-char         # right
bindkey -M menuselect 'j' vi-down-line-or-history # bottom

bindkey -M isearch . self-insert
bindkey -v

setopt interactivecomments

# get top 10 shell commands:
alias top10='print -l ${(o)history%% *} | uniq -c | sort -nr | head -n 10'

# Use a default width of 80 for manpages for more convenient reading
export MANWIDTH=${MANWIDTH:-80}

# Find out which libs define a symbol
lcheck() {
    if [[ -n "$1" ]] ; then
        nm -go /usr/lib/lib*.a 2>/dev/null | grep ":[[:xdigit:]]\{8\} . .*$1"
    else
        echo "Usage: lcheck <function>" >&2
    fi
}

# Memory overview
memusage() {
    ps aux | awk '{if (NR > 1) print $5;
      if (NR > 2) print "+"}
      END { print "p" }' | dc
}

# print hex value of a number
hex() {
    emulate -L zsh
    if [[ -n "$1" ]]; then
        printf "%x\n" $1
    else
        print 'Usage: hex <number-to-convert>'
        return 1
    fi
}

# Misc settings
# -------------
## ctrl-s will no longer freeze the terminal.
stty erase "^?"


fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line
  else
    zle push-input
    zle clear-screen
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

cdpath=(~/workspace)


alias insecssh='ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -o "PreferredAuthentications=keyboard-interactive"'

# pstop -- ps with top-like output
# from http://chneukirchen.org/dotfiles/.zshrc
pstop() {
  ps -eo pid,user,pri,ni,vsz,rsz,stat,pcpu,pmem,time,comm --sort -pcpu |
    head "${@:--n 20}"
}

alias ex='simple-extract'

alias targzlook='tar -ztvf'

alias targzcomp='tar -zcvf'

alias tmux='tmux -2'

alias k=kubectl

# Environment
# -------------

export GOPATH=~/go
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:~/.cargo/bin
export PATH=$PATH:~/bin

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8


# make less suck less
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;38;5;74m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[38;5;246m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[04;38;5;146m'
export LESS_TERMCAP_so=$'\e[0;31m'

export EDITOR='vim'
export SUDO_EDITOR='vim'

alias back-to-master='git checkout master && git uff && git branch --merged | egrep -v "(^\*|master|dev)" | xargs git branch -d'

alias pwn-docker='docker rm -f $(docker ps -a -q)'

if [[ -x "$(command -v fw)" ]];
then
  eval $(fw print-zsh-setup -f 2>/dev/null);
fi;


{{- if eq .chezmoi.os "darwin" }}
# OSX specific

# ------------------------------------------------------------------------------
# Read escape sequences from terminfo
# http://zshwiki.org/home/zle/bindkeys#reading_terminfo
# ------------------------------------------------------------------------------

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]="$terminfo[khome]"
key[End]="$terminfo[kend]"
key[Insert]="$terminfo[kich1]"
key[Backspace]="$terminfo[kbs]"
key[Delete]="$terminfo[kdch1]"
key[Up]="$terminfo[kcuu1]"
key[Down]="$terminfo[kcud1]"
key[Left]="$terminfo[kcub1]"
key[Right]="$terminfo[kcuf1]"
key[PageUp]="$terminfo[kpp]"
key[PageDown]="$terminfo[knp]"

# setup key accordingly
[[ -n "$key[Home]"      ]] && bindkey -- "$key[Home]"      beginning-of-line
[[ -n "$key[End]"       ]] && bindkey -- "$key[End]"       end-of-line
[[ -n "$key[Insert]"    ]] && bindkey -- "$key[Insert]"    overwrite-mode
[[ -n "$key[Backspace]" ]] && bindkey -- "$key[Backspace]" backward-delete-char
[[ -n "$key[Delete]"    ]] && bindkey -- "$key[Delete]"    delete-char
[[ -n "$key[Up]"        ]] && bindkey -- "$key[Up]"        up-line-or-history
[[ -n "$key[Down]"      ]] && bindkey -- "$key[Down]"      down-line-or-history
[[ -n "$key[Left]"      ]] && bindkey -- "$key[Left]"      backward-char
[[ -n "$key[Right]"     ]] && bindkey -- "$key[Right]"     forward-char

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        echoti smkx
    }
    function zle-line-finish () {
        echoti rmkx
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi

__workon () {
  PROJECT="$(fw ls | fzf --cycle --query=$1 --color=light --preview-window=top:50% --preview='fw inspect {}' --no-mouse --select-1)"
  SCRIPT="$(fw gen-workon $2 $PROJECT)";
  if [ $? -eq 0 ]; then
    eval "$SCRIPT";
  else
    printf "$SCRIPT\n";
  fi
};

workon () {
  __workon "$1"
};

export JAVA_HOME=/opt/homebrew/opt/openjdk@21/libexec/openjdk.jdk/Contents/Home/

export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
eval "$(/opt/homebrew/bin/brew shellenv)"

export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm

{{- else if eq .chezmoi.os "linux" }}
# Linux specific
export PATH="/usr/local/sbin:$PATH"
export PATH=$PATH:/usr/local/go/bin

export PINENTRY_USER_DATA="USE_CURSES=1"
export SSH_ASKPASS=/usr/lib/ssh/x11-ssh-askpass
unset GPG_AGENT_INFO

export SSH_AUTH_SOCK=/run/user/1000/ssh-agent.socket
export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")
export JDK_HOME=$(readlink -f /usr/bin/javac | sed "s:bin/javac::")
export TAURI_PRIVATE_KEY="/home/mriehl/.tauri/private_key"

alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias pacman-autoremove='sudo pacman -Rns $(pacman -Qqtd)'
alias keymap='setxkbmap'
alias 'keymap?'='setxkbmap -query'
{{- end }}




prompt off
eval "$(starship init zsh)"
